// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.2
// source: tictactoe.proto

package tictactoe

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TicTacToeServiceClient is the client API for TicTacToeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TicTacToeServiceClient interface {
	// Bi-directional streaming RPC for playing the game
	PlayStream(ctx context.Context, opts ...grpc.CallOption) (TicTacToeService_PlayStreamClient, error)
}

type ticTacToeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTicTacToeServiceClient(cc grpc.ClientConnInterface) TicTacToeServiceClient {
	return &ticTacToeServiceClient{cc}
}

func (c *ticTacToeServiceClient) PlayStream(ctx context.Context, opts ...grpc.CallOption) (TicTacToeService_PlayStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TicTacToeService_ServiceDesc.Streams[0], "/tictactoe.TicTacToeService/PlayStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &ticTacToeServicePlayStreamClient{stream}
	return x, nil
}

type TicTacToeService_PlayStreamClient interface {
	Send(*PlayStreamRequest) error
	Recv() (*PlayStreamResponse, error)
	grpc.ClientStream
}

type ticTacToeServicePlayStreamClient struct {
	grpc.ClientStream
}

func (x *ticTacToeServicePlayStreamClient) Send(m *PlayStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ticTacToeServicePlayStreamClient) Recv() (*PlayStreamResponse, error) {
	m := new(PlayStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TicTacToeServiceServer is the server API for TicTacToeService service.
// All implementations must embed UnimplementedTicTacToeServiceServer
// for forward compatibility
type TicTacToeServiceServer interface {
	// Bi-directional streaming RPC for playing the game
	PlayStream(TicTacToeService_PlayStreamServer) error
	mustEmbedUnimplementedTicTacToeServiceServer()
}

// UnimplementedTicTacToeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTicTacToeServiceServer struct {
}

func (UnimplementedTicTacToeServiceServer) PlayStream(TicTacToeService_PlayStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method PlayStream not implemented")
}
func (UnimplementedTicTacToeServiceServer) mustEmbedUnimplementedTicTacToeServiceServer() {}

// UnsafeTicTacToeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TicTacToeServiceServer will
// result in compilation errors.
type UnsafeTicTacToeServiceServer interface {
	mustEmbedUnimplementedTicTacToeServiceServer()
}

func RegisterTicTacToeServiceServer(s grpc.ServiceRegistrar, srv TicTacToeServiceServer) {
	s.RegisterService(&TicTacToeService_ServiceDesc, srv)
}

func _TicTacToeService_PlayStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TicTacToeServiceServer).PlayStream(&ticTacToeServicePlayStreamServer{stream})
}

type TicTacToeService_PlayStreamServer interface {
	Send(*PlayStreamResponse) error
	Recv() (*PlayStreamRequest, error)
	grpc.ServerStream
}

type ticTacToeServicePlayStreamServer struct {
	grpc.ServerStream
}

func (x *ticTacToeServicePlayStreamServer) Send(m *PlayStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ticTacToeServicePlayStreamServer) Recv() (*PlayStreamRequest, error) {
	m := new(PlayStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TicTacToeService_ServiceDesc is the grpc.ServiceDesc for TicTacToeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TicTacToeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tictactoe.TicTacToeService",
	HandlerType: (*TicTacToeServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PlayStream",
			Handler:       _TicTacToeService_PlayStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tictactoe.proto",
}
